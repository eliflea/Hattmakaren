/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package System;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import oru.inf.InfException;
import oru.inf.InfDB;
import java.util.Collections;

/**
 *
 * @author meyac_2qya4l2
 */
public class Statistik1 extends javax.swing.JFrame {
    private static InfDB idb; 

    /**
     * Creates new form Statistik1
     */
    public Statistik1(InfDB idb) {
        initComponents();
        this.idb = idb;
        fyllAr();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    

    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbAr = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbManad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbKvartal = new javax.swing.JComboBox<>();
        btnAr = new javax.swing.JButton();
        btnKvartal = new javax.swing.JButton();
        btnManad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtStatistik = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Välj år");

        cbAr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024" }));

        jLabel2.setText("Välj månad");

        cbManad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "Novermber", "December" }));

        jLabel3.setText("Välj kvartal");

        cbKvartal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Q1", "Q2", "Q3", "Q4" }));

        btnAr.setText("Visa statistik för valt år");
        btnAr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArActionPerformed(evt);
            }
        });

        btnKvartal.setText("Visa statistik för valt kvartal");
        btnKvartal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKvartalActionPerformed(evt);
            }
        });

        btnManad.setText("Visa statistik för vald månad");
        btnManad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManadActionPerformed(evt);
            }
        });

        txtStatistik.setEditable(false);
        txtStatistik.setColumns(20);
        txtStatistik.setRows(5);
        jScrollPane1.setViewportView(txtStatistik);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cbManad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnAr)
                    .addComponent(btnKvartal)
                    .addComponent(btnManad))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cbKvartal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbManad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbKvartal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addComponent(btnAr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnKvartal)
                .addGap(18, 18, 18)
                .addComponent(btnManad)
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void fyllAr()
{
    String hamtaAr = "SELECT DISTINCT YEAR(Datum) AS År FROM hattmakarna.orders ORDER BY År DESC";
    int i = 0;
        try {
            ArrayList<String> allaAr = idb.fetchColumn(hamtaAr);
            
            for(String ar : allaAr)
            {
                String aret = ar.substring(0, 4);
                if(aret.equals("2024"))
                {
                    
                }
                else{
                cbAr.insertItemAt(aret, i);
                }
                i++;
            }
            
            
         } catch (InfException ex) {
            Logger.getLogger(Statistik1.class.getName()).log(Level.SEVERE, null, ex);
        }
}

    private void btnKvartalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKvartalActionPerformed
        // TODO add your handling code here:
        
        String valtAr = cbAr.getSelectedItem().toString();
        
        String valtKvartal = cbKvartal.getSelectedItem().toString().trim();
        
        String sqlHamtaKvartalsForsaljning = "";
        
        String sqlHamtaKvartal = "";
        
        if(cbKvartal.getSelectedItem().toString().equals("Q1"))
        {
             sqlHamtaKvartalsForsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum<= '" + valtAr + "-03-31' && Datum>='" + valtAr + "-01-01'";
                
             sqlHamtaKvartal = "SELECT Order_ID FROM Orders WHERE Datum<= '" + valtAr + "-03-31' && Datum>='" + valtAr + "-01-01'";


        }
        
        if(cbKvartal.getSelectedItem().toString().equals("Q2"))
        {
             sqlHamtaKvartalsForsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum<= '" + valtAr + "-06-30' && Datum>='" + valtAr + "-04-01'";
             sqlHamtaKvartal = "SELECT Order_ID FROM Orders WHERE Datum<= '" + valtAr + "-06-30' && Datum>='" + valtAr + "-04-01'";

        }
        
        if(cbKvartal.getSelectedItem().toString().equals("Q3"))
        {
             sqlHamtaKvartalsForsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum<= '" + valtAr + "-09-30' && Datum>='" + valtAr + "-07-01'";
             sqlHamtaKvartal = "SELECT Order_ID FROM Orders WHERE Datum<= '" + valtAr + "-09-30' && Datum>='" + valtAr + "-07-01'";

        }
        
        if(cbKvartal.getSelectedItem().toString().equals("Q4"))
        {
             sqlHamtaKvartalsForsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum<= '" + valtAr + "-12-31' && Datum>='" + valtAr + "-10-01'";
             sqlHamtaKvartal = "SELECT Order_ID FROM Orders WHERE Datum<= '" + valtAr + "-12-31' && Datum>='" + valtAr + "-10-01'";

        }
        
        
        try {
            
            
            
            ArrayList<String> orderIDAttHamtaMaterialIDMed = idb.fetchColumn(sqlHamtaKvartal);
            ArrayList<String> relevantaMaterialID = new ArrayList<String>();
            ArrayList<String> materialNamn = new ArrayList<String>();
            for(String orderID : orderIDAttHamtaMaterialIDMed)
                {
                    String sqlHamtaMaterialID = "SELECT Material_ID FROM hatt_i_order WHERE Order_ID = " + orderID;
                    String ettMaterialID = idb.fetchSingle(sqlHamtaMaterialID);
                    relevantaMaterialID.add(ettMaterialID);
                }
            for(String materialID : relevantaMaterialID)
            {
                String sqlHamtaMaterialNamn = "SELECT Namn FROM Material WHERE Material_ID = " + materialID;
                String ettMaterialNamn = idb.fetchSingle(sqlHamtaMaterialNamn);
                materialNamn.add(ettMaterialNamn);
            }
            
            String sqlHamtaAlltMaterial = "SELECT Namn FROM material";
            ArrayList<String> alltMaterial = idb.fetchColumn(sqlHamtaAlltMaterial);
            
            ArrayList<String> materialSomSkaSkrivasUt = new ArrayList<String>();
            
            for(String ettMaterial : alltMaterial)
            {
            int antalMaterial = Collections.frequency(materialNamn, ettMaterial);
            if(antalMaterial == 1)
            {
                materialSomSkaSkrivasUt.add(antalMaterial + " hatt av " + ettMaterial + "\n");
            }
            
            else
            {
            materialSomSkaSkrivasUt.add(antalMaterial + " hattar av " + ettMaterial + "\n");
            }
            
            String totalForsaljningsSumma = idb.fetchSingle(sqlHamtaKvartalsForsaljning);
            if(totalForsaljningsSumma == null)
                {
                    txtStatistik.setText("Total försäljning år " + valtAr + ", " + valtKvartal + ": 0 SEK \n \n" + materialSomSkaSkrivasUt);
                }
            else{
                    txtStatistik.setText("Total försäljning år " + valtAr + ", " + valtKvartal + ": " + totalForsaljningsSumma + " SEK \n \n" + materialSomSkaSkrivasUt);

            }
        }
        }
        catch (InfException ex) {
            Logger.getLogger(Statistik1.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnKvartalActionPerformed

    private void btnManadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManadActionPerformed
        // TODO add your handling code here:
        
        String valtAr = cbAr.getSelectedItem().toString();
        
        String valdManad = cbManad.getSelectedItem().toString();
        String manadIDatumFormatStart = "";
        String manadIDatumFormatSlut = "";
        
        if(valdManad.equals("Januari"))
        {
            manadIDatumFormatStart = "01";
            manadIDatumFormatSlut = "01-31";
        }
        
        if(valdManad.equals("Februari"))
        {
            manadIDatumFormatStart = "02";
            manadIDatumFormatSlut = "02-28";
        }
        
        if(valdManad.equals("Mars"))
        {
            manadIDatumFormatStart = "03";
            manadIDatumFormatSlut = "03-31";
        }
        
        if(valdManad.equals("April"))
        {
            manadIDatumFormatStart = "04";
            manadIDatumFormatSlut = "04-30";
        }
        
        if(valdManad.equals("Maj"))
        {
            manadIDatumFormatStart = "05";
            manadIDatumFormatSlut = "05-31";
        }
        if(valdManad.equals("Juni"))
        {
            manadIDatumFormatStart = "06";
            manadIDatumFormatSlut = "06-30";
        }
        if(valdManad.equals("Juli"))
        {
            manadIDatumFormatStart = "07";
            manadIDatumFormatSlut = "07-31";
        }
        if(valdManad.equals("Augusti"))
        {
            manadIDatumFormatStart = "08";
            manadIDatumFormatSlut = "08-31";
        }
        
        if(valdManad.equals("September"))
        {
            manadIDatumFormatStart = "09";
            manadIDatumFormatSlut = "09-30";
        }
        
        if(valdManad.equals("Oktober"))
        {
            manadIDatumFormatStart = "10";
            manadIDatumFormatSlut = "10-31";
        }
        
        if(valdManad.equals("November"))
        {
            manadIDatumFormatStart = "11";
            manadIDatumFormatSlut = "11-30";
        }
        
        if(valdManad.equals("December"))
        {
            manadIDatumFormatStart = "12";
            manadIDatumFormatSlut = "12-31";
        }
        
        ArrayList<String> materialSomSkaSkrivasUt = new ArrayList<String>();

        
        String sqlHamtaManadsforsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum>= '" + valtAr + "-" + manadIDatumFormatStart + "-01' && Datum<='" + valtAr + "-" + manadIDatumFormatSlut + "'";
        
        String sqlHamtaManad = "SELECT Order_ID FROM orders WHERE DATUM>= '" + valtAr + "-" + manadIDatumFormatStart + "-01' && Datum<='" + valtAr + "-" + manadIDatumFormatSlut + "'";
        
        try {
            String totalForsaljningsSumma = idb.fetchSingle(sqlHamtaManadsforsaljning);
            
            ArrayList<String> orderIDAttHamtaMaterialIDMed = idb.fetchColumn(sqlHamtaManad);
            ArrayList<String> relevantaMaterialID = new ArrayList<String>();
            ArrayList<String> materialNamn = new ArrayList<String>();
            for(String orderID : orderIDAttHamtaMaterialIDMed)
                {
                    String sqlHamtaMaterialID = "SELECT Material_ID FROM hatt_i_order WHERE Order_ID = " + orderID;
                    String ettMaterialID = idb.fetchSingle(sqlHamtaMaterialID);
                    relevantaMaterialID.add(ettMaterialID);
                }
            for(String materialID : relevantaMaterialID)
            {
                String sqlHamtaMaterialNamn = "SELECT Namn FROM Material WHERE Material_ID = " + materialID;
                String ettMaterialNamn = idb.fetchSingle(sqlHamtaMaterialNamn);
                materialNamn.add(ettMaterialNamn);
            }
            
            String sqlHamtaAlltMaterial = "SELECT Namn FROM material";
            ArrayList<String> alltMaterial = idb.fetchColumn(sqlHamtaAlltMaterial);
            
            
            for(String ettMaterial : alltMaterial)
            {
            int antalMaterial = Collections.frequency(materialNamn, ettMaterial);
            if(antalMaterial == 1)
            {
                materialSomSkaSkrivasUt.add(antalMaterial + " hatt av " + ettMaterial + "\n");
            }
            else
            {
            materialSomSkaSkrivasUt.add(antalMaterial + " hattar av " + ettMaterial + "\n");
            }
            
            if(totalForsaljningsSumma == null)
            {  
                txtStatistik.setText("Total försäljning år " + valtAr + ", " + valdManad + ": 0 SEK \n \n" + materialSomSkaSkrivasUt);
            }
            else{
                 txtStatistik.setText("Total försäljning år " + valtAr + ", " + valdManad + ": " + totalForsaljningsSumma + " SEK \n \n" + materialSomSkaSkrivasUt);
            }
        }
        }
        catch (InfException ex) {
            Logger.getLogger(Statistik1.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        
        
    }//GEN-LAST:event_btnManadActionPerformed

    private void btnArActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArActionPerformed
        // TODO add your handling code here:
        String valtAr = cbAr.getSelectedItem().toString();
        
        String sqlHamtaArsforsaljning = "SELECT SUM(Totalsumma) AS Årssumma FROM Orders WHERE Datum<= '" + valtAr + "-12-31' && Datum>='" + valtAr + "-01-01'";
        
        String sqlHamtaAr = "SELECT Order_ID FROM Orders WHERE Datum<= '" + valtAr + "-12-31' && Datum>='" + valtAr + "-01-01'";
        
        
        try {
            String totalForsaljningsSumma = idb.fetchSingle(sqlHamtaArsforsaljning);
            
            ArrayList<String> orderIDAttHamtaMaterialIDMed = idb.fetchColumn(sqlHamtaAr);
            ArrayList<String> relevantaMaterialID = new ArrayList<String>();
            ArrayList<String> materialNamn = new ArrayList<String>();
            for(String orderID : orderIDAttHamtaMaterialIDMed)
                {
                    String sqlHamtaMaterialID = "SELECT Material_ID FROM hatt_i_order WHERE Order_ID = " + orderID;
                    String ettMaterialID = idb.fetchSingle(sqlHamtaMaterialID);
                    relevantaMaterialID.add(ettMaterialID);
                }
            for(String materialID : relevantaMaterialID)
            {
                String sqlHamtaMaterialNamn = "SELECT Namn FROM Material WHERE Material_ID = " + materialID;
                String ettMaterialNamn = idb.fetchSingle(sqlHamtaMaterialNamn);
                materialNamn.add(ettMaterialNamn);
            }
            
            String sqlHamtaAlltMaterial = "SELECT Namn FROM material";
            ArrayList<String> alltMaterial = idb.fetchColumn(sqlHamtaAlltMaterial);
            
            ArrayList<String> materialSomSkaSkrivasUt = new ArrayList<String>();
            
            for(String ettMaterial : alltMaterial)
            {
            int antalMaterial = Collections.frequency(materialNamn, ettMaterial);
            if(antalMaterial == 1)
            {
                materialSomSkaSkrivasUt.add(antalMaterial + " hatt av " + ettMaterial + "\n");
            }
            else
            {
            materialSomSkaSkrivasUt.add(antalMaterial + " hattar av " + ettMaterial + "\n");
            }
            }
            
            
            txtStatistik.setText("Total försäljning år " + valtAr + ": " + totalForsaljningsSumma + " SEK \n \n " + materialSomSkaSkrivasUt );
        } catch (InfException ex) {
            Logger.getLogger(Statistik1.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_btnArActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAr;
    private javax.swing.JButton btnKvartal;
    private javax.swing.JButton btnManad;
    private javax.swing.JComboBox<String> cbAr;
    private javax.swing.JComboBox<String> cbKvartal;
    private javax.swing.JComboBox<String> cbManad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtStatistik;
    // End of variables declaration//GEN-END:variables
}
